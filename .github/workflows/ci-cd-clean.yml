name: CI/CD Pipeline - Web

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/vikareta-web

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        # Generate a unique version based on timestamp and commit
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SHORT_SHA=${GITHUB_SHA::7}
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        if [ "$BRANCH_NAME" = "main" ]; then
          VERSION="v${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="latest"
        else
          VERSION="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="${BRANCH_NAME}-latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        
        echo "Generated version: ${VERSION}"
        echo "Latest tag: ${LATEST_TAG}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.latest_tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.short_sha }}
        labels: |
          org.opencontainers.image.title=Vikareta Web
          org.opencontainers.image.description=Vikareta Web Application
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        no-cache: true
        platforms: linux/amd64,linux/arm64

    - name: Image Build Summary
      if: github.ref == 'refs/heads/main'
      run: |
        echo "## 🚀 Web Image Build Completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Available Images:" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.latest_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Manual Deployment Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. **ArgoCD Dashboard**: Go to your ArgoCD UI → vikareta-web → Sync" >> $GITHUB_STEP_SUMMARY
        echo "2. **Update Image Tag**: Set image tag to \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "3. **Alternative kubectl**: \`kubectl set image deployment/vikareta-web vikareta-web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} -n vikareta\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Build Details:" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        
        echo "🎉 vikareta-web image ready for deployment!"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        echo "🔗 Registry: ${{ env.REGISTRY }}"
        echo "📝 Ready for manual sync in ArgoCD dashboard"

    - name: Deployment notification
      if: always() && github.ref == 'refs/heads/main'
      run: |
        echo "✅ Image build and push completed successfully!"
        echo ""
        echo "## 📦 Built Image Available:"
        echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        echo ""
        echo "## 🔧 Manual Sync Options:"
        echo "1. **ArgoCD UI**: Go to ArgoCD → vikareta-web → Sync"
        echo "2. **kubectl**: kubectl set image deployment/vikareta-web vikareta-web=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} -n vikareta"
        echo ""
        echo "## 🏷️ Available Tags:"
        echo "- ${{ steps.version.outputs.version }}"
        echo "- ${{ steps.version.outputs.latest_tag }}"
        echo "- ${{ steps.version.outputs.short_sha }}"

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Web Release ${{ steps.version.outputs.version }}
        body: |
          ## Web Release ${{ steps.version.outputs.version }}
          
          **Docker Image:** `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
          
          **Changes:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ steps.version.outputs.branch }}
          
          **Manual Deployment:**
          - 📦 Image ready in registry
          - 🔧 Manual sync required in ArgoCD dashboard
          - 🔗 Available at: https://vikareta.com (after sync)
        draft: false
        prerelease: false