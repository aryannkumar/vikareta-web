name: CI/CD Pipeline - Web

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/vikareta-web

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        # Generate a unique version based on timestamp and commit
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SHORT_SHA=${GITHUB_SHA::7}
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        if [ "$BRANCH_NAME" = "main" ]; then
          VERSION="v${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="latest"
        else
          VERSION="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="${BRANCH_NAME}-latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        
        echo "Generated version: ${VERSION}"
        echo "Latest tag: ${LATEST_TAG}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.latest_tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.short_sha }}
        labels: |
          org.opencontainers.image.title=Vikareta Web
          org.opencontainers.image.description=Vikareta Web Application
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        no-cache: true
        platforms: linux/amd64,linux/arm64

    - name: Install ArgoCD CLI
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üì¶ Installing ArgoCD CLI..."
        curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
        rm argocd-linux-amd64
        argocd version --client

    - name: ArgoCD Login and Sync
      id: wait-deployment
      if: github.ref == 'refs/heads/main'
      env:
        ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}
      run: |
        echo "üîê Logging into ArgoCD..."
        argocd login $ARGOCD_SERVER --auth-token $ARGOCD_TOKEN --insecure
        
        echo "üöÄ Updating image tag for vikareta-web..."
        argocd app set vikareta-web --helm-set image.tag=${{ steps.version.outputs.version }}
        
        echo "üîÑ Syncing vikareta-web application..."
        argocd app sync vikareta-web --timeout 300 --prune
        
        echo "‚è≥ Waiting for sync to complete..."
        argocd app wait vikareta-web --timeout 600 --health
        
        echo "‚úÖ vikareta-web deployment completed successfully!"

    - name: Deployment notification
      if: always() && github.ref == 'refs/heads/main'
      run: |
        if [ "${{ steps.wait-deployment.outcome }}" = "success" ]; then
          echo "üéâ vikareta-web:${{ steps.version.outputs.version }} deployed successfully!"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        else
          echo "‚ùå vikareta-web deployment failed!"
        fi

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && steps.wait-deployment.outcome == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Web Release ${{ steps.version.outputs.version }}
        body: |
          ## Web Release ${{ steps.version.outputs.version }}
          
          **Docker Image:** `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
          
          **Changes:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ steps.version.outputs.branch }}
          
          **Deployment:**
          - ‚úÖ Successfully deployed to production
          - üîó Available at: https://vikareta.com
        draft: false
        prerelease: false