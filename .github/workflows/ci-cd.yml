name: CI/CD Pipeline - Web

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/vikareta-web

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate version
      id: version
      run: |
        # Generate a unique version based on timestamp and commit
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SHORT_SHA=${GITHUB_SHA::7}
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        if [ "$BRANCH_NAME" = "main" ]; then
          VERSION="v${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="latest"
        else
          VERSION="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="${BRANCH_NAME}-latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        
        echo "Generated version: ${VERSION}"
        echo "Latest tag: ${LATEST_TAG}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.latest_tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.short_sha }}
        labels: |
          org.opencontainers.image.title=Vikareta Web
          org.opencontainers.image.description=Vikareta Web Application
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        no-cache: true
        platforms: linux/amd64,linux/arm64

    - name: Update ArgoCD Application Image
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Updating ArgoCD application with new image tag..."
        
        # Update the image tag in ArgoCD
        curl -X PATCH \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "spec": {
              "source": {
                "helm": {
                  "parameters": [
                    {
                      "name": "image.tag",
                      "value": "${{ steps.version.outputs.version }}"
                    }
                  ]
                }
              }
            }
          }' \
          "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/vikareta-web" || echo "Failed to update image tag"

    - name: Trigger ArgoCD Sync
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üîÑ Triggering ArgoCD sync for vikareta-web..."
        
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "revision": "HEAD",
            "prune": true,
            "dryRun": false,
            "strategy": {
              "hook": {
                "force": true
              }
            }
          }' \
          "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/vikareta-web/sync"

    - name: Wait for deployment
      id: wait-deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "‚è≥ Waiting for ArgoCD to sync vikareta-web..."
        sleep 30
        
        # Check application health
        for i in {1..15}; do
          echo "Checking application health... (attempt $i/15)"
          
          RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/vikareta-web")
          
          HTTP_CODE="${RESPONSE: -3}"
          JSON_RESPONSE="${RESPONSE%???}"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå API request failed with HTTP code: $HTTP_CODE"
            sleep 20
            continue
          fi
          
          if echo "$JSON_RESPONSE" | jq empty 2>/dev/null; then
            HEALTH_STATUS=$(echo "$JSON_RESPONSE" | jq -r '.status.health.status // "Unknown"')
            SYNC_STATUS=$(echo "$JSON_RESPONSE" | jq -r '.status.sync.status // "Unknown"')
            
            echo "üîç Health Status: $HEALTH_STATUS"
            echo "üîç Sync Status: $SYNC_STATUS"
            
            if [ "$HEALTH_STATUS" = "Healthy" ] && [ "$SYNC_STATUS" = "Synced" ]; then
              echo "‚úÖ Web service deployed successfully!"
              exit 0
            fi
          fi
          
          echo "‚è≥ Waiting for application to become healthy and synced..."
          sleep 20
        done
        
        echo "‚ö†Ô∏è Deployment status check timed out"
        exit 1

    - name: Deployment notification
      if: always() && github.ref == 'refs/heads/main'
      run: |
        if [ "${{ steps.wait-deployment.outcome }}" = "success" ]; then
          echo "üéâ vikareta-web:${{ steps.version.outputs.version }} deployed successfully!"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
        else
          echo "‚ùå vikareta-web deployment failed!"
        fi

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main' && steps.wait-deployment.outcome == 'success'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Web Release ${{ steps.version.outputs.version }}
        body: |
          ## Web Release ${{ steps.version.outputs.version }}
          
          **Docker Image:** `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
          
          **Changes:**
          - Commit: ${{ github.sha }}
          - Branch: ${{ steps.version.outputs.branch }}
          
          **Deployment:**
          - ‚úÖ Successfully deployed to production
          - üîó Available at: https://vikareta.com
        draft: false
        prerelease: false