name: CI/CD Pipeline - Vikareta Web Frontend

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/vikareta-web
  SERVICE_NAME: web
  SERVICE_PORT: 5741

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint || echo "Linting not configured, skipping..."

    - name: Run tests
      run: npm test || echo "Tests not configured, skipping..."

    - name: Build application
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate comprehensive tags for ArgoCD Image Updater
      id: version
      run: |
        TIMESTAMP=$(date +%Y%m%d%H%M%S)
        SHORT_SHA=${GITHUB_SHA::7}
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        
        if [ "$BRANCH_NAME" = "main" ]; then
          VERSION="v${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="latest"
        else
          VERSION="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          LATEST_TAG="${BRANCH_NAME}-latest"
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "latest_tag=${LATEST_TAG}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "branch=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        
        echo "Generated ArgoCD Image Updater compatible version: ${VERSION}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.latest_tag }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.short_sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        labels: |
          org.opencontainers.image.title=Vikareta Web Frontend
          org.opencontainers.image.description=Vikareta Main Website Frontend
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ steps.version.outputs.timestamp }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Create ArgoCD Image Updater manifest
      if: github.ref == 'refs/heads/main'
      run: |
        cat > image-manifest.json << EOF
        {
          "service": "${{ env.SERVICE_NAME }}",
          "latest_tag": "${{ steps.version.outputs.version }}",
          "timestamp": "${{ steps.version.outputs.timestamp }}",
          "commit": "${{ steps.version.outputs.short_sha }}",
          "full_sha": "${{ github.sha }}",
          "branch": "${{ steps.version.outputs.branch }}",
          "registry": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}",
          "port": "${{ env.SERVICE_PORT }}",
          "url": "https://vikareta.com",
          "build_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }
        EOF

    - name: Build Summary
      if: github.ref == 'refs/heads/main'
      run: |
        echo "## ðŸš€ Web Frontend Image Build Completed!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“¦ Available Images:" >> $GITHUB_STEP_SUMMARY
        echo "- **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.latest_tag }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### âœ… Ready for ArgoCD Deployment:" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: Web Frontend (Port ${{ env.SERVICE_PORT }})" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: https://vikareta.com" >> $GITHUB_STEP_SUMMARY
        echo "- **ArgoCD**: Will auto-detect tag \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        
        echo "ðŸŽ‰ vikareta-web image ready for deployment!"

    - name: Create GitHub Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: web-${{ steps.version.outputs.version }}
        name: Web Frontend Release ${{ steps.version.outputs.version }}
        body: |
          ## Web Frontend Release ${{ steps.version.outputs.version }}
          
          **Docker Image:** `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`
          **Service URL:** https://vikareta.com
          **Port:** ${{ env.SERVICE_PORT }}
          
          **Ready for ArgoCD deployment - pull latest image to deploy!**
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}