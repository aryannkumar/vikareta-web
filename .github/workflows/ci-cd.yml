name: CI/CD Pipeline - Web

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/vikareta-web

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        no-cache: true
        platforms: linux/amd64,linux/arm64

    - name: Trigger ArgoCD Sync for Centralized Platform
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Triggering centralized platform sync after web image update..."
        
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "revision": "HEAD",
            "prune": true,
            "dryRun": false,
            "strategy": {
              "hook": {
                "force": true
              }
            }
          }' \
          "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/vikareta-platform/sync"

    - name: Wait for deployment
      id: wait-deployment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Waiting for ArgoCD to sync the centralized platform..."
        sleep 30
        
        # Check application health
        for i in {1..10}; do
          echo "Checking platform health... (attempt $i/10)"
          
          # Get the response and check if it's valid JSON
          RESPONSE=$(curl -s -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            "https://${{ secrets.ARGOCD_SERVER }}/api/v1/applications/vikareta-platform")
          
          HTTP_CODE="${RESPONSE: -3}"
          JSON_RESPONSE="${RESPONSE%???}"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "API request failed with HTTP code: $HTTP_CODE"
            echo "Response: $JSON_RESPONSE"
            sleep 30
            continue
          fi
          
          # Validate JSON and extract status
          if echo "$JSON_RESPONSE" | jq empty 2>/dev/null; then
            STATUS=$(echo "$JSON_RESPONSE" | jq -r '.status.health.status // "Unknown"')
            echo "Platform health status: $STATUS"
            
            if [ "$STATUS" = "Healthy" ]; then
              echo "‚úÖ Web service deployed successfully via centralized platform!"
              exit 0
            fi
          else
            echo "Invalid JSON response received"
            echo "Response: $JSON_RESPONSE"
          fi
          
          echo "Waiting for platform to become healthy..."
          sleep 30
        done
        
        echo "‚ö†Ô∏è Platform deployment status check timed out"
        exit 1

    - name: Deployment notification
      if: always() && github.ref == 'refs/heads/main'
      run: |
        if [ "${{ steps.wait-deployment.outcome }}" = "success" ]; then
          echo "üéâ vikareta-web deployed successfully via centralized Helm chart!"
        else
          echo "‚ùå vikareta-web deployment failed!"
        fi